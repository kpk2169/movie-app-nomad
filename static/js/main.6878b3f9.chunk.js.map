{"version":3,"sources":["routes/About.js","components/Movie.js","routes/home.js","App.js","index.js"],"names":["About","Movie","id","year","title","summary","poster","genres","className","src","alt","map","genre","index","slice","prototype","PropTypes","number","isRequired","string","arrayOf","Home","state","isLoading","movies","getMovies","a","axios","get","data","setState","console","log","this","movie","medium_cover_image","React","Component","App","path","exact","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+NAMeA,MAJf,WACI,OAAO,iE,gGCCX,SAASC,EAAT,GAA6D,EAA5CC,GAA6C,IAAzCC,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,OAAQC,EAAU,EAAVA,OAC/C,OACI,sBAAKC,UAAU,QAAf,UACI,qBAAKC,IAAKH,EAAQI,IAAKN,EAAOA,MAAOA,IACrC,sBAAKI,UAAU,cAAf,UACI,oBAAIA,UAAU,eAAd,SAA+BJ,IAC/B,oBAAII,UAAU,cAAd,SAA6BL,IAC7B,oBAAIK,UAAU,gBAAd,SAA+BD,EAAOI,KAAI,SAACC,EAAOC,GAC9C,OAAO,oBAAIL,UAAU,eAAd,SAA6CI,GAAVC,QAK9C,oBAAGL,UAAU,iBAAb,UAA+BH,EAAQS,MAAM,EAAE,KAA/C,eAOhBb,EAAMc,UAAY,CACdb,GAAIc,IAAUC,OAAOC,WACrBf,KAAMa,IAAUC,OAAOC,WACvBd,MAAOY,IAAUG,OAAOD,WACxBb,QAASW,IAAUG,OAAOD,WAC1BZ,OAAQU,IAAUG,OAAOD,WACzBX,OAAQS,IAAUI,QAAQJ,IAAUG,QAAQD,YAGjCjB,QC0CAoB,G,kNArDbC,MAAQ,CACNC,WAAW,EACXC,OAAQ,I,EAGVC,U,sBAAY,8BAAAC,EAAA,4DACM,2DADN,SAEmCC,IAAMC,IADnC,4DADN,gBAEeJ,EAFf,EAEFK,KAAQA,KAASL,OACzB,EAAKM,SAAS,CAAEP,WAAW,EAAQC,OAASA,IAHlC,2C,wDAZZ,WACEO,QAAQC,IAAI,sB,kCAEd,WACED,QAAQC,IAAI,iB,+BAcd,WACED,QAAQC,IAAI,4BAKZC,KAAKR,c,oBAGP,WACEM,QAAQC,IAAI,gBACZ,MAA+BC,KAAKX,MAA5BC,EAAR,EAAQA,UAAYC,EAApB,EAAoBA,OACpB,OACE,yBAAShB,UAAU,YAAnB,SACGe,EAEC,qBAAKf,UAAU,SAAf,SACE,sBAAMA,UAAU,eAAhB,0BAGF,qBAAKA,UAAU,SAAf,SAEMgB,EAAOb,KAAI,SAAAuB,GACT,OAAO,cAAC,EAAD,CAELhC,GAAIgC,EAAMhC,GACVC,KAAM+B,EAAM/B,KACZC,MAAO8B,EAAM9B,MACbC,QAAS6B,EAAM7B,QACfC,OAAQ4B,EAAMC,mBACd5B,OAAQ2B,EAAM3B,QANT2B,EAAMhC,e,GAnDZkC,IAAMC,YCMVC,MAPf,WACE,OAAO,eAAC,IAAD,WACL,cAAC,IAAD,CAAOC,KAAK,IAAIC,OAAO,EAAMC,UAAWpB,IACxC,cAAC,IAAD,CAAOkB,KAAK,SAASE,UAAWzC,QCCpC0C,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,a","file":"static/js/main.6878b3f9.chunk.js","sourcesContent":["import React from 'react';\n\nfunction About() {\n    return <span>About this page : I built it</span>\n}\n\nexport default About;","import React from 'react';\nimport PropTypes from \"prop-types\";\nimport \"./Movie.css\";\n\nfunction Movie({ id, year, title, summary, poster, genres }) {\n    return (\n        <div className=\"movie\">\n            <img src={poster} alt={title} title={title}/>\n            <div className=\"movie__data\">\n                <h3 className=\"movie__title\" >{title}</h3>\n                <h5 className=\"movie__year\">{year}</h5>\n                <ul className=\"movie__genres\">{genres.map((genre, index) => {\n                    return <li className=\"movie__genre\" key={ index }>{ genre }</li>\n                })}</ul>\n                {/* <h5 className=\"movie__genres\">{genres.map(genre => {\n                    return genre + \" \";\n                }) }</h5> */}\n                <p className=\"movie__summary\">{summary.slice(0,180)}...</p>\n                {/* 텍스트를 어레이로 분할한다. */}\n            </div>\n        </div>\n    );\n}\n\nMovie.prototype = {\n    id: PropTypes.number.isRequired,\n    year: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    summary: PropTypes.string.isRequired,\n    poster: PropTypes.string.isRequired,\n    genres: PropTypes.arrayOf(PropTypes.string).isRequired\n}\n\nexport default Movie","import React from \"react\";\nimport axios from \"axios\";\nimport Movie from \"../components/Movie\";\nimport \"./Home.css\";\n// cmd + d 다중선택 동일한 코드 동시 편집하기 ] \n\nclass Home extends React.Component {\n   // render Method 를 가지고 있음 클래스는 return을 가지지않음 함수가 아니기 때문에\n   /*\n   react 에서 유일하게 사용하는 함수 render() {}\n   render 전에 실행되는 함수들이 존재함 생명주기 \n   mounting 생성 \n   updating 일반적인 업데이트\n   unmounting 컴포넌트 죽음 화면 이동 시  state, \n   */\n  componentDidUpdate() {\n    console.log(\"update component\");\n  }\n  componentWillUnmount() {\n    console.log(\"Good bye~~~\");\n  }\n  \n  state = {\n    isLoading: true,\n    movies: []\n  };\n\n  getMovies = async () => {\n    const api_url = \"https://yts-proxy.now.sh/list_movies.json?sort_by=rating\";\n    const { data: { data : { movies } }} = await axios.get(api_url); // axios 가 끝날때까지 기다린다...\n    this.setState({ isLoading: false , movies : movies});\n  }\n  \n  componentDidMount() {\n    console.log(\"first component rendered\");\n    // didMount 에서 data 를 fetch 한다... \n    // setTimeout(() => {\n    //   this.setState({isLoading: false})\n    // }, 6000);\n    this.getMovies();\n  }\n\n  render() {\n    console.log(\"render start\");\n    const { isLoading , movies } = this.state;\n    return (\n      <section className=\"container\">\n        {isLoading ?\n          (\n          <div className=\"loader\">\n            <span className=\"loader__text\">Loading...</span> \n          </div>\n          ) : (\n          <div className=\"movies\">\n              {\n                movies.map(movie => {\n                  return <Movie\n                    key={movie.id}\n                    id={movie.id}\n                    year={movie.year}\n                    title={movie.title}\n                    summary={movie.summary}\n                    poster={movie.medium_cover_image}\n                    genres={movie.genres}\n                    />\n                })\n              }\n          </div>\n          )}\n      </section>\n    );\n  }\n}\n\n\nexport default Home;\n\n\n\n/*\n// function maptest(array1) {\n  //   array1.map(function (value) {\n    //     return value;\n    //   });\n    // }\n    \n    function Food({ name , picture , rating }) {  // {fav} object 안에서 fav만을 가져온다.\n      return (<div>\n        <h1>I like {name}</h1>\n        <h4>{rating}/5.0</h4>\n        <img src={picture} alt={name} />\n        </div>);\n      }\n      const foodILike = [{ id: 1, name: \"kimchi\", image: \"https://w.namu.la/s/2958e0d7304f1b744021983c55747de2840e0e59a1f3d677d9315f5bad981f002769ce59921aea02b2dd23b5384a0ce30864fe6d84ea1b9aaed80fb3b5f60b6d4a4d6b735bd0ad3194a5bdbaebb7f4dfece3954e96826f08374a2933b4b72d962a7f3332a90bc4e8434e0f5eae5a1ecf\", rating : 5 },\n      {\n        id: 2, name: \"snacks\", image: \"https://w.namu.la/s/2958e0d7304f1b744021983c55747de2840e0e59a1f3d677d9315f5bad981f002769ce59921aea02b2dd23b5384a0ce30864fe6d84ea1b9aaed80fb3b5f60b6d4a4d6b735bd0ad3194a5bdbaebb7f4dfece3954e96826f08374a2933b4b72d962a7f3332a90bc4e8434e0f5eae5a1ecf\", rating: 4.3  }];\n        \n        function renderFood(dish) {\n          return < Food key={dish.id} name={dish.name} picture={ dish.image } rating={dish.rating} />\n        }\n        \n        Food.propTypes = {\n          name: PropTypes.string.isRequired,\n          picture: PropTypes.string.isRequired,\n          rating : PropTypes.number.isRequired\n        }\n        state = {\n          count: 0\n        };\n        \n        // setState 함수로 state를 변경해야 render를 재호출해 리로드된다...\n        add = () => {\n          this.setState(current => ({ count: current.count + 1 }));\n        };\n        minus = () => {\n          this.setState(current => ({ count: current.count - 1 }));\n        };\n       <h1>the number is : {this.state.count}</h1>\n       <button onClick={ this.add }>Add</button>\n       <button onClick={ this.minus }>Minus</button>\n        */","import React from \"react\";\nimport { HashRouter, Route } from \"react-router-dom\";\nimport About from \"./routes/About\";\nimport Home from './routes/home';\n\nfunction App() {\n  return <HashRouter>\n    <Route path=\"/\" exact={true} component={Home} />\n    <Route path=\"/About\" component={About} />\n  </HashRouter>;\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n/*\n  <App /> Component 컴포넌트는 HTML 을 반환하는 함수 ... \n  javascript 와 html 을 연결해주는 jsx \n  */\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('potato')\n);\n\n"],"sourceRoot":""}